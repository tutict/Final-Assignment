plugins {
    id 'java'
    id 'io.quarkus' version '3.18.3'
    id 'org.graalvm.buildtools.native' version '0.10.4'
    id 'me.champeau.jmh' version '0.7.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    implementation 'io.quarkus:quarkus-arc:3.18.3'
    implementation 'io.vertx:vertx-kafka-client:4.5.12'
    implementation 'io.vertx:vertx-web:4.5.12'
    implementation 'io.vertx:vertx-web-client:4.5.12'
    implementation 'io.quarkus:quarkus-vertx:3.18.3'
    implementation 'io.quarkus:quarkus-kafka-client:3.18.3'
    implementation 'io.quarkiverse.mybatis:quarkus-mybatis-plus:2.2.4'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'io.quarkus:quarkus-jdbc-mysql:3.18.3'
    implementation 'io.quarkus:quarkus-cache:3.18.3'
    implementation 'io.quarkus:quarkus-redis-cache:3.18.3'
    implementation 'io.quarkus:quarkus-redis-client:3.18.3'
    implementation 'io.quarkus:quarkus-smallrye-openapi:3.18.3'
    implementation 'io.quarkus:quarkus-rest:3.18.3'
    implementation 'io.quarkus:quarkus-rest-jsonb:3.18.3'
    implementation 'io.quarkus:quarkus-smallrye-jwt:3.18.3'
    implementation 'io.quarkus:quarkus-smallrye-jwt-build:3.18.3'
    implementation 'io.quarkus:quarkus-messaging-kafka:3.18.3'
    implementation 'io.smallrye.reactive:smallrye-reactive-messaging-api:4.27.0'
    implementation 'io.quarkus.platform:quarkus-bom:3.18.3'
    implementation 'org.openjdk.jmh:jmh-core:1.37'
    implementation 'io.quarkiverse.langchain4j:quarkus-langchain4j-ollama:0.24.0'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    testRuntimeOnly 'org.jboss.logmanager:log4j2-jboss-logmanager:2.0.1.Final'
    testImplementation 'io.quarkus:quarkus-junit5:3.18.3'
}

group 'my-groupId'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_22
    targetCompatibility = JavaVersion.VERSION_22
}

test {
    systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-parameters', '--release', '22'])
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['--release', '22'])
}

configurations.configureEach {
    exclude group: 'ch.qos.logback'
    exclude group: 'org.slf4j', module: 'slf4j-simple'
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
}

// TODO: 调整到编译时可执行
tasks.register('startDocker', Exec) {

    logger.info("当前操作系统为：${System.getProperty("os.name")}")

    // 获取当前操作系统名称
    def osName = System.getProperty("os.name").toLowerCase()
    // 获取项目的根目录路径
    def projectDirPath = project.projectDir.absolutePath
    // 定义脚本的相对路径
    def windowsScript = "${projectDirPath}/finalAssignmentTools/quarkus_start_docker/run.bat"
    def unixScript = "${projectDirPath}/finalAssignmentTools/use_docker/run.sh"

    if (osName.contains("windows")) {
        // Windows 系统，执行 run.bat
        commandLine 'cmd', '/c', windowsScript
    } else if (osName.contains("linux") || osName.contains("mac")) {
        // Linux 或 macOS 系统，执行 run.sh
        commandLine 'sh', unixScript
    } else {
        // 不支持的操作系统
        doFirst {
            logger.warn("当前操作系统 (${osName}) 不受支持。")
        }
    }
}

// 将 startDocker 任务设置为 quarkusDev 任务的前置任务
// 确保 startDocker 任务在 quarkusDev 任务之前执行
tasks.named('quarkusDev') {
    dependsOn 'startDocker'
}